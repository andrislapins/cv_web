
prometheus:
  ingress:
    enabled: false
  prometheusSpec:
    additionalArgs:
      - name: enable-feature
        value: exemplar-storage
      - name: web.enable-remote-write-receiver
    enableAdminAPI: true
    serviceMonitorSelectorNilUsesHelmValues: false
    # serviceMonitorSelector:
    #   matchLabels:
    #     prometheus: kube-prometheus-stack
    podMonitorSelectorNilUsesHelmValues: false
    # podMonitorSelector:
    #   matchLabels:
    #     release: kube-prometheus-stack
    externalUrl: https://${subdomain_prometheus}.${domain}
    resources:
      requests:
        cpu: 500m
        memory: 2048Mi
      limits:
        cpu: 2000m
        memory: 4096Mi
    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: ${storage_class}
          resources:
            requests:
              storage: 50Gi
    externalLabels:
      cluster: hetzner-main
    scrapeClasses:
      - name: cluster-relabeling
        default: true
        relabelings:
          - sourceLabels: [__name__]
            regex: (.*)
            targetLabel: cluster
            replacement: hetzner-main
            action: replace
    additionalScrapeConfigs:
      - job_name: "otelcollector"
        honor_timestamps: true
        scrape_interval: 15s
        scrape_timeout: 10s
        metrics_path: /metrics
        scheme: http
        static_configs:
          - targets:
              - "otel-opentelemetry-collector.opentelemetry.svc.cluster.local:8888"

defaultRules:
  create: true
  rules:
    kubeProxy: false
    prometheus: false

alertmanager:
  enabled: false
  ingress:
    enabled: false
  # config:
  #   global:
  #     resolve_timeout: 5m
  #   inhibit_rules:
  #     - source_matchers:
  #         - "severity = critical"
  #       target_matchers:
  #         - "severity =~ warning|info"
  #       equal:
  #         - "namespace"
  #         - "alertname"
  #     - source_matchers:
  #         - "severity = warning"
  #       target_matchers:
  #         - "severity = info"
  #       equal:
  #         - "namespace"
  #         - "alertname"
  #     - source_matchers:
  #         - "alertname = InfoInhibitor"
  #       target_matchers:
  #         - "severity = info"
  #       equal:
  #         - "namespace"
  #     - target_matchers:
  #         - "alertname = InfoInhibitor"
  #   route:
  #     group_by: ["..."]
  #     group_wait: 0s
  #     group_interval: 5m
  #     repeat_interval: 24h
  #     receiver: "null"
  #     routes:
  #       - receiver: "slack-critical"
  #         matchers:
  #           - severity="critical"
  #         continue: false
  #       - receiver: "null"
  #         matchers:
  #           - severity!="critical"
  #         continue: false
  #       - receiver: "null"
  #         matchers:
  #           - alertname = "Watchdog"
  #   receivers:
  #     - name: "null"
  #     - name: "slack-critical"
  #       slack_configs:
  #         - api_url: https://hooks.slack.com/services/xxx/xxx/xxx
  #           channel: "#hetzner-kubespray"
  #           title: "Alert: {{ .CommonAnnotations.summary }}"
  #           text: |
  #             {{ range .Alerts }}
  #             *Alert:* {{ .Labels.alertname }} | *Severity:* {{ .Labels.severity }}
  #             *Description:* {{ .Annotations.description }}
  #             {{ end }}
  #   templates:
  #     - "/etc/alertmanager/config/*.tmpl"
  # alertmanagerSpec:
  #   externalUrl: https://${subdomain_alertmanager}.${domain}


prometheusOperator:
  enabled: true

kube-state-metrics:
  enabled: true

grafana:
  enabled: false

kubeControllerManager:
  enabled: false

kubeScheduler:
  enabled: false
